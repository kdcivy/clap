<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="ApplicationContextHolder" class="com.ktds.framework.boot.ApplicationContextHolder"></bean>

	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- static html file uri path -->
	<mvc:resources mapping="/sample/**" location="/sample/" />
	<mvc:resources mapping="/app/**" location="/app/" />
	<mvc:resources mapping="/ng-grid/**" location="/ng-grid-app/" />
	<mvc:resources mapping="/favicon.ico" location="/favicon.ico"/>  
	
	<!-- Uncomment and your base-package here: <context:component-scan base-package="org.springframework.samples.web"/> -->
	<context:component-scan base-package="com.ktds.framework" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

<!-- 	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp'
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean> -->
<!-- 
	<bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"></bean>
 -->
<!-- 	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<array>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
				</bean>
			</array>
		</property>
	</bean> -->
 <!-- 
 Factory to create a ContentNegotiationManager and configure it with one or more ContentNegotiationStrategy instances via simple setters.
 The following table shows setters, resulting strategy instances, and if in use by default: 
 
 Property Setter					Underlying Strategy			Default Setting
=============================== =============================== ===============================
 setFavorPathExtension(boolean)		Path Extension strategy 	On
 favorParameter						Parameter strategy			Off
 ignoreAcceptHeader					Header strategy				On
 defaultContentType					Fixed content strategy		Not set
 defaultContentTypeStrategy			ContentNegotiationStrategy	Not set
 
 ContentNegotiationManager : Central class to determine requested media types for a request.
 	This is done by delegating to a list of configured ContentNegotiationStrategy instances.
  -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- <property name="favorPathExtension" value="true"/>  -->
        <property name="ignoreAcceptHeader" value="false"/>        
        <property name="defaultContentType" value="application/json" />
  		<property name="mediaTypes">
			<map>
				<entry key="text" value="text/plain" />
 				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
    </bean>
<!-- 
The ContentNegotiatingViewResolver does not resolve views itself, but delegates to other ViewResolvers.
By default, these other view resolvers are picked up automatically from the application context, 
though they can also be set explicitly by using the viewResolvers property.

Note that in order for this view resolver to work properly, the order property needs to be set to a higher precedence than the others (the default is Ordered.HIGHEST_PRECEDENCE).
This view resolver uses the requested media type to select a suitable View for a request.

The requested media type is determined through the configured ContentNegotiationManager.
Once the requested media type has been determined, this resolver queries each delegate view resolver for a View and determines if the requested media type is compatible with the view's content type).
The most compatible view is returned.
 -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="contentNegotiationManager" ref="contentNegotiationManager"/>
<!--  		<property name="mediaTypes">
			<map>
 				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property> -->
		<property name="viewResolvers">
			<list>
 				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/views/" />
					<property name="suffix" value=".jsp" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" >
					<property name="prettyPrint" value="true"></property>
				</bean>
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg>
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
							<property name="autodetectAnnotations" value="true"/>
							<property name="supportedClasses">
								<list>
									<value>java.util.List</value>
									<value>java.lang.String</value>
									<value>com.ktds.framework.sample.mybatis.domain.Employee</value>
								</list>
							</property>
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean>

</beans>
